m4_include(`../FARMail/fm_version.m4')m4_dnl
.Language=Russian,Russian (Русский)
.PluginContents=Скипты - плагин второго уровня для FARMail

@Contents
$^`#'Скрипты - плагин второго уровня для FARMail `v'MAJOR.MINOR#

 - ~Как этим пользоваться - Главное меню~@Usage@
 - ~Написание скриптов~@Script@
 - ~Конфигурация~@Config@
 - ~Авторы~@Authors@
 - ~Лицензия~@License@


@Usage
$^#Как этим пользоваться - Главное меню#

  #1. Выполнить скрипт#
  Открывает диалог ~Выполнения скриптов~@RunScript@.

  После разделителя Вы можете выбирать/добавлять/удалять/обновлять/перемещать
наиболее часто используемые скрипты. (~Диалог параметров скрипта~@Settings@)

  #Ins#
  Добавить новый скрипт в меню (максимальное количество - 26 скриптов).

  #Del#
  Удалить скрипт под курсором из меню.

  #F4#
  Отредактировать свойства скрипта под курсором.

  #Ctrl-Up, Ctrl-Dn#
  Переместить скрипт под курсором на одну позицию вверх или вниз в меню.

  #Enter#
  Запустить скрипт под курсором.



 ~Содержание~@Contents@


@Settings
$^#Диалог параметров скрипта#

#Описание# - Описание которое будет показано в меню плагина.

#Полный путь к скрипту# - Полный путь к файл-скрипту.



 ~Содержание~@Contents@


@RunScript
$^#Диалог выполнения скриптов#

#Название файла# - здесь указывается полный или относительный путь к
файлу-скрипту которой Вы хотите выполнить или просто название файла если он
находится в папке по умолчанию для скриптов (Смотрите ~Конфигурация~@Config@).

#Примечание:# Дабы запустить скрипт находящейся в текущем каталоге, Вам
нужно написать: .\filename.ext



 ~Содержание~@Contents@


@Script
$^#Написание скриптов#

  - ~Синтаксис~@Syntax@
  - ~Функции~@Functions@

  Для избежания проблем с кодировками необходимо писать все скрипты в
кодировке OEM.



 ~Содержание~@Contents@


@Syntax
$^#Синтаксис#

 #Переменные#.
Есть 2 типа переменных: целочисленные (#integer#) и строковые (#string#).
Переменные не нужно никак объявлять, и можно работать с неопределенными
переменными которые по умолчанию получают значение 0 (или "0" для строк).
Переменные доступны в любом месте скрипта.
При задании строк можно использовать управляющие последовательности,
аналогичные используемым в языках C/C++.
Целочисленные переменные имеют размер 32 бита.


 #Присваивание#.
Чтобы присвоить значение переменной, напишите #<переменная>=<значение>#.

   #i = 0#
   #j = "abc"#


 #Комментарии#.
Строки, начинающиеся с "#rem #" или с "#//#" игнорируются.
Блочные комментарии начинаются с "/*" и заканчиваются "*/".

   #rem это комментарий#
   #//это комментарий#
   #/*это#
   #комментарий*/#


 #Константы#.
Есть 2 типа констант: целочисленные и строковые. Символ в одинарных
кавычках - целое число. Примеры:

   #123#, #'A'# - целые числа;
   #"123"#, #"asd"# - строки.


 Оператор #[]#.
Можно получить доступ к отдельному символу строковой переменной:
#<переменная>[<позиция символа>]# (индекс начинается с 0).
Это значение можно менять. Примеры:

   #i = str[2] + 4#
   #str[2] = 'a'#


 #Арифметические выражения#.
Можно использовать '#++#', '#--#', '#+#', '#-#', '#*#', '#/#' и '#()#'
при работе с целыми числами и '#+#' со строками:

   #i = -3*(j+k)*(1-l/2)#
   #str = str + "123"#
   #i = 5# -> #j = ++i + 1# -> #j==7, i==6#
   #i = 5# -> #j = i-- + 1# -> #j==6, i==4#

Строки и числа могут использоваться одновременно в одном выражении.
Тип результата определяется автоматически. При вычислении выражения
строки преобразуются в числа, а числа в строки автоматически.


 #Условные выражения#.
Условное выражение - это целочисленное выражение, неверное при нулевом
значении и верное при ненулевом. Это может быть результат арифметического
выражения, а также какая-либо комбинация из перечисленных ниже:

   #a1 == a2#    верно если a1 равно a2
   #a1 != a2#    верно если a1 не равно a2
   #a1 <= a2#    верно если a1 меньше либо равно a2
   #a1 < a2 #    верно если a1 меньше a2
   #a1 >= a2#    верно если a1 больше либо равно a2
   #a1 > a2 #    верно если a1 больше a2
   #!a1     #    не a1 (только если a1 целое число)
   #a1 || a2#    a1 или a2 (только если a1 и a2 целочисленные)
   #a1 && a2#    a1 и a2 (только если a1 и a2 целочисленные)


#Команды#.

1. Условие.

   #if# <условие верно>
     ...
   #else#
     ...
   #endif#

2. Условный цикл.

   #while# <условие верно>
     ...
   #wend#

   Для немедленного выхода из цикла можно использовать команду #break#.
   Для немедленного перехода к следующей итерации можно использовать команду #continue#.

3. Определение и вызов подпрограмм.

   #sub# Name
     выражения
     ...
   #endsub#

   #gosub# Name

   Необходимо помнить, что все переменные глобальны и доступны в любой части
   скрипта даже, если они определены в подпрограмме.



 ~Написание скриптов~@Script@


@Functions
$^#Функции#

#1. Работа с редактором#

#Важно:# Для повышения производительности при работе с встроенным редактором
необходимо перед доступом к определенной строке установить курсор на эту
строку и при вызове соответствующей функции указывать в качестве номера
строки "-1".

 integer #nlines#().

   Параметры: нет.
   Возвращает число строк в редакторе.
   Минимальное возвращаемое значение - единица.

 string #line#( integer i ).

   Параметры: i - номер строки в редакторе, -1 для текущей.
   Возвращает строку с номером i.

 integer #setline#( string str, integer i ).

   Параметры: str - новая строка;
              i - номер строки редактора, -1 для текущей.
   Устанавливает строку i в редакторе в str.
   Возвращает 0.

 integer #delline#( integer i ).

   Параметры: i - номер строки редактора, -1 для текущей;
   Удаляет строку с номером i.
   Возвращает 0.

 integer #insline#( integer i, integer eol ).

   Параметры: i - номер строки, -1 для текущей;
              eol - признак конца строки.
   Вставляет пустую строку в позицию i. Если eol нулевой,
то новая строка вставится в начало строки i, иначе в конец.
   Возвращает 0.
   Замечание: Эта функция меняет положение курсора.

 integer #setpos#(integer i, integer pos).

   Параметры: i - номер строки, -1 для текущей;
              pos - номер колонки, -1 для текущей.
   Устанавливает курсор в строку i, колонку pos.
   Для получения номера текущей строки используется вызов setpos(-1); текущую
позицию в строке - setpos(-1,-1).
   Возвращает 0 когда устанавливаем позицию.

 string #editorstate#().

   Параметры : нет.
   Получение состояния текущего редактора.
   Возвращает строку следующего вида, в которой каждый символ соответствует
указанному состоянию редактора:
   первый символ (с индексом 0) - '1' если файл был изменен, '0' в противном случае;
   второй символ (с индексом 1) - '1' если файл был сохранен, '0' в противном случае;
   третий символ (с индексом 2) - '1' если файл заблокирован, '0' в противном случае.

 integer #blktype#().

   Параметры: нет.
   Возвращает тип выделения:
    - отсутствует - 0;
    - потоковое - 1;
    - вертикальное - 2.

 integer #blkstart#().

   Параметры: нет.
   Возвращает номер строки с которой начинается блок.

 integet #setsel#(integer blktype, integer StartLine, integer StartPos, integer Width, integer Height).

   Параметры: blktype - снять выделение - 0
                      - потоковое - 1
                      - вертикальное - 2;
               StartLine - первая строка блока;
               StartPos - начальная позиция блока. Если StartPos = -1,
то выделение блока снимается;
               Width - ширина блока. Может быть отрицательной величиной;
               Height - высота блока. Должна быть >= 1.
   Устанавливает выделение в редакторе. Для очистки выделения используйте
setsel().
   Заметка: StartLine и StartPos для первой строки и колонки - 0,0.
   Возвращает 0.

 integer #selstart#(integer i).

   Параметры: i - номер строки, -1 для текущей.
   Возвращает начальную позицию выделения для требуемой строки. Если в строке
отсутствует выделение, возвращает -1.

 integer #selend#(integer i).

   Параметры: i - номер строки, -1 для текущей строки.
   Возвращает конечную выделения для требуемой строки. Если выделение
включает в себя конец линии, возвращает -1.

#2. Работа со строками#

 integer #strlen#( string str ).

   Параметры: str - строковое значение.
   Возвращает длину строки str.

 string #substr#( string str, integer delta, integer len ).

   Параметры: str - строка, delta - смещение в строке str;
              len - длина новой строки.
   Возвращает подстроку str, начинающуюся с позиции delta,
длиной len символов.

 integer #strstr#( string str, string substr ).

   Параметры: str - строка; substr - подстрока для поиска в str.
   Возвращает позицию substr в str. Если str не включает в себя
substr, возвращает -1.

 string #strlwr#( string str ).

   Параметры: str - строковое значение.
   Возвращает строку в нижнем регистре.

 string #strupr#( string str ).

   Параметры: str - строковое значение.
   Возвращает строку в верхнем регистре.

 string #sprintf# ( string format, ...).

   Parameters: format - строка формата
               ... - любое количество переменных любого типа
   Пишет форматированный текст в строку. sprintf получает набор параметров,
применяет к каждому определитель формата содержащейся в строке формата, и
выводит отформатированную строку. sprintf применяет первый определитель
формата к первому параметру, второй второму и т.д.. Количество определителей
формата должно соответствовать количеству параметров.
   Строка формата определена так же как и в C/C++ (в общем как в wvsprintf).
   Возвращает отформатированную строку.

 string #ltrim#( string str ).

   Параметры: str - строковое значение.
   Возвращает str c удалёнными пробелами и символами табуляции в начале
строки.

 string #rtrim#( string str ).

   Параметры: str - строковое значение.
   Возвращает str c удалёнными пробелами и символами табуляции в конце строки.

 string #trim#( string str ).

   Параметры: str - строковое значение.
   Возвращает str c удалёнными пробелами и символами табуляции в начале и в
конце строки.

#3. Превращение#

 string #string#( integer i ).

   Параметры: i - целочисленное значение.
   Возвращает i, преобразованное в строку.

 string #char#( integer c ).

   Параметры: c - целое число (код ascii).
   Возвращает строку из одного символа с кодом c.

 integer #integer#( string str ).

   Параметры: str - строковое значение.
   Возвращает str, преобразованную в число.

#4. Общение с пользователем#

 integer #message#( (integer|string)var, ... ).

   Параметры: любое количество строк и чисел.
   Показывает сообщение строки которого являются все переданные параметры.
   Возвращает 0.

 string #usrinput#(string title, string message, string init[, string history]).

   Параметры: title - заголовок диалога;
              message - текст, отображаемый в диалоге;
              init - текст первоначально отображаемый в полоске ввода;
              history - имя истории ввода.
   Показывает диалог со строкой текста и полоской ввода.
   Возвращает содержимое полоски ввода или пустую строку при отмене.

 integer #usrmenu#( (integer|string)var, ... )

   Параметры: любое количество строк и чисел.
   Показывает меню, пунктами которого являются все переданные параметры.
   Возвращает номер выбранного пункта или -1 при отмене.
   Пункты нумеруются с нуля.

 string #addressbook#()

   Параметры: нет.
   Открывает плагин второго уровня "Адресная книга", если такой установлен.
   Возвращает выбранную позицию (полное имя и e-mail) или пустую строку
при отмене.

#5. Работа с сообщениями#

 string #header#( string msg_header, string kludge_name )

   Параметры: msg_header - заголовок сообщения;
              kludge_name - имя поля (например: "From:", "To:" и т.д.).
   Возвращает содержимое поля или пустую строку, если поле не найдено.
   Перед возвратом строка при необходимости декодируется из Base64 или QP.
Если поле многострочное - оно склеивается в одну строку.

 string #boundary#().

   Параметры: нет.
   Возвращает строку со сгенерированным MIME разделителем, в форме:
"--=_NextPart_XXXX_XXXX_XXXX.XXXX" где X это шестнадцатеричное число.

 string #encodeheader#(string text_to_encode, string encoding)

   Параметры: text_to_encode - текст который необходимо закодировать;
              encoding - название хотимой кодировки.
   Возвращает заданный текст закодированный в mime base 64 в заданной
кодировке. Название кодировки может одно из настроенных в FARMail (например
"koi8-r" и т.п.). Закодированный текст будет следующей формы:
=?encoding_name?B?encoded_text_in_base64?=. А также он будет разделён на
несколько частей в случае если длина одной части превышает 75 символов.

#6. Работа с файлами#

 integer #filecount#( string path ).

   Параметры: path - строка указывающая полный путь к файлу.
   Возвращает число строк в указанном файле, 0 при ошибке.

 string #fileline#( string path, integer i ).

   Параметры: path - строка указывающая полный путь к файлу;
              i - номер строки.
   Возвращает строку номер i из указанного файла. При ошибке возвращает пустую
строку.
   #Примечание:# 1. Максимальная длина любой строки в файле должна быть меньше
1000, для правильной работы функции.
               2. Функция предназначена для одноразового чтения файла,
не злоупотребляйте.

 integer #redirect#(string path, integer mode).

   Параметры: path - директория или имя файла;
              mode - номер режима.
   Цель данной функции - перенаправление содержимого текущего редактора
в другой файл. Выполнение скрипта прекратится с вызовом этой функции если
текущий редактор модален (кроме режимов 4 и 5).
   Если режим четный path содержит директорию где создается файл, уникальное
имя файла генерируется автоматически и содержит восемь цифр.
   Если режим нечетный path содержит имя файла, который нужно создать.
   В режимах 0 и 1 - текст текущего редактора перенаправляется в заданный файл,
текущий редактор зарывается и заданный файл открывается в новом редакторе где
скрипт может продолжать выполнятся.
   В режимах 2 и 3 - текст текущего редактора перенаправляется в заданный файл,
созданный файл открывается в новом окне редактора (при условии, что текущий
редактор немодален) где скрипт может продолжать выполнятся.
   В режимах 4 и 5 - текст текущего редактора перенаправляется в заданный файл,
на пассивной панели отображается созданный файл.
   Возвращает 0.

 string/integer #getini#(string section, string key, string/integer default, string ini).

   Параметры: section - название секции в ini файле;
              key - название ключа в ini файле;
              default - значение по умолчанию для этого ключа;
              ini - путь к ini файлу.
   Возвращает значение заданного ключа из заданной секции в заданном ini
файле. Если нет такого ключа/секции/файла то возвращается значение по
умолчанию. Тип возвращаемого значения (integer/string) зависит от типа
заданного значения по умолчанию. При ошибке возвращает пустую строку.

integer #setini#(string ini, string section, string key, string/integer value).

   Параметры: ini - путь к ini файлу.
              section - название секции в ini файле;
              key - название ключа в ini файле;
              value - значение для этого ключа.
   Устанавливает значение заданного ключа из заданной секции в заданном ini
файле. Если значение ключа не задано, то этот ключ удаляется, если же при этом
не указано и название ключа, то удаляется секция.
   Возвращает 0 при ошибке или положительное значение при успешном выполнении.

#7. Разное#

 #exit#().

   Параметры: нет.
   Останавливает выполнение скрипта.

 integer #random#( integer i ).

   Параметры: i - целое число.
   Возвращает случайное число в диапазоне 0...(i-1).

 string #date#().

   Параметры: нет.
   Возвращает строку с текущей датой в формате дд.мм.гггг.

 string #time#().

   Параметры: нет.
   Возвращает строку с текущим временем в формате чч:мм:сс.

 string #version#(integer i).

   Параметры: i - тип хотимой программы:
                - 0 - FARMail;
                - 1 - FAR;
                - 2 - Windows.
   Возвращает строку с именем и версии просимой программы.

  Следующие две функции работают в следующих плеерах:
  1. Winamp 1.x, 2.x.
  2. Winamp 3.x, если в нем установлен компонент
     "Winamp 2.x Plugin Manager".
  3. STP, если в нем включена опция "Emulate Winamp".
  4. Apollo 37.
  5. Foobar2000. Ограничения:
     - не отличается пауза от воспроизведения.
     - #winampsong# берет название текущей композиции из
       заголовка окна плеера.

 integer #winampstate#()

   Параметры: нет.
   Возвращает: -1 - winamp не найден.
                0 - winamp остановлен.
                1 - winamp проигрывает музыкальную композицию.
                3 - winamp находится в состоянии паузы.

 string #winampsong#()

   Параметры: нет.
   Возвращает название текущей композиции winamp'а.

 Пример использования:

 #pos=nlines()-1#
 #wa=winampstate()#
 #if(wa==-1)#
   #insline(pos,1)#
   #setline("winamp не обнаружен",pos+1)#
 #else#
   #waname=winampsong()#
   #if(wa==0)#
     #insline(pos,1)#
     #setline("остановлено: "+waname,pos+1)#
   #else#
     #if(wa==1)#
       #insline(pos,1)#
       #setline("играет: "+waname,pos+1)#
     #else#
       #insline(pos,1)#
       #setline("пауза: "+waname,pos+1)#
     #endif#
   #endif#
 #endif#



 ~Написание скриптов~@Script@


@Config
$^#Конфигурация#

#Папка скриптов# - здесь указывается полный путь к папке, в которой по
умолчанию будут искаться скрипты. Если это поле пустое, то скрипты ищутся
в подпапке SCRIPTS папки, в которой находится плагин.



 ~Содержание~@Contents@


@Authors
$^#Авторы#

  На сей момент разработкой плагина занимается FARMail Group:

  #Алексей Ярославский#
  E-mail   : at yandex.ru / trexinc
  Homepage : ~http://trexinc.sf.net/~@http://trexinc.sf.net/@

  #Вадим Егоров#
  E-mail   : at bmg.lv / zg
  Homepage : ~http://zg.times.lv/~@http://zg.times.lv/@

  Первоначальные идея и осуществление:

  #Сергей Александров#
  E-mail  : at zmail.ru / poseidon
  Homepage: ~http://alsea.euro.ru/~@http://alsea.euro.ru/@
            ~http://dpidb.genebee.msu.ru/users/poseidon/~@http://dpidb.genebee.msu.ru/users/poseidon/@



 ~Содержание~@Contents@

@License
$ #Лицензия#

 Скрипты - плагин второго уровня для FARMail
 Copyright (C) COPYRIGHT FARMail Group
 Copyright (C) 1999,2000 Serge Alexandrov

 This program is free software; you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation; either version 2 of the License, or
 (at your option) any later version.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program; if not, write to the Free Software
 Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

 ~Содержание~@Contents@
