# Target
TARGET = bcn
SRCS = $(TARGET).cpp resource.rc
DIR_BIN = bin
DIR_OBJ = obj
TARGETFULLNAME = $(DIR_BIN)/$(TARGET).dll
DEF = $(TARGET).gcc.def

VCD=E:/VS2008/VC
SDK=E:/VSSDK/v6.0A
BIN=bin
SUF=

# Defines
DEFINES=/D UNICODE /D _UNICODE

# Flags
FLG_WARN =
FLG_COMM =
FLG_OPTS =/GF /Gy /GS- /GR- /Gr /Zp8 /c /J /nologo /W3 /LD /Oi /EHs-c-
FLG_COMP =$(FLG_COMM) $(FLG_WARN) $(DEFINES) /I $(VCD)\include /I $(SDK)\include  $(FLG_OPTS)
FLG_TYPE =/dll /nodefaultlib /noentry
FLG_LIBS =gdi32.lib kernel32.lib user32.lib shell32.lib 
FLG_LINK =$(FLG_COMM) $(FLG_TYPE) $(FLG_LIBS) /LIBPATH:$(VCD)/lib$(SUF) /LIBPATH:$(SDK)/lib$(SUF)

# Include
#VPATH = ../inc/
#COM_INC = D:\src\inc
#COM_LIB = -L $(COMMON) -lCRT

# Commands
CXX   = $(VCD)/$(BIN)/cl.exe
RCC   = $(SDK)/bin/rc.exe
LINK  = $(VCD)/$(BIN)/link.exe
DLLTL = dlltool
RM    = rm -f
RMD   = rmdir --ignore-fail-on-non-empty
CP    = cp -f
M4    = m4 -P
MV    = mv -f
MKDIR = mkdir -p

#
OBJS = $(patsubst %.cpp, $(DIR_OBJ)/%.obj, $(filter %.cpp,$(SRCS)))
RESS = $(patsubst %.rc,  $(DIR_OBJ)/%.res, $(filter %.rc, $(SRCS)))

# make objs
$(DIR_OBJ)/%.obj: %.cpp
	@echo compiling $<
	@$(MKDIR) $(DIR_OBJ)
	@$(CXX) $(FLG_COMP)  /Fo$(DIR_OBJ)/ $<

# make resources
$(DIR_OBJ)/%.res: %.rc
	@echo compiling $<
	@$(MKDIR) $(DIR_OBJ)
	@$(RCC) /i $(SDK)/include /i $(VCD)/include /fo $@ $<

# link
$(TARGETFULLNAME): $(RESS) $(OBJS)
	@echo linking $@
	@$(MKDIR) $(@D)
	@$(LINK) $(OBJS) $(RESS) $(FLG_LINK) /OUT:$(TARGETFULLNAME)

all: $(TARGETFULLNAME)

clean:
	@echo cleaning...
	@$(RM) $(TARGETFULLNAME)
	@$(RMD) $(DIR_BIN)
	@$(RM) -r $(DIR_OBJ)
