Cинтаксис почти полностью совпадает с перловыми.

Общий вид: /regexp/options

regexp - последовательность символов и метасимволов.
К символам относятся буквы и цифры, всё остальное
если и не является метасимволом, может им стать,
поэтому всё что не буква и не цифра,
следует делать символом "насильственно".
Для этого надо перед ним поставить обратный слэш - \

Метасимволы:
\ - следующий за ним символ будет рассмотрен именно как символ,
    а не как метасимвол.
. - любой символ, кроме перевода строки. Если среди опций
    есть s, то вообще любой символ.
^ - начало строки. Если указана опция m, то начало
    любой строки в тексте, иначе только начало текста.
$ - конец строки. Если указана опция m, то конец
    любой строки в тексте, иначе только конец текста.
| - альтернатива. Должно совпасть выражение до или после |.
()- группировка.
[]- класс символов.


Группировка служит либо для использования "ссылок",
либо для использования попавшего в скобку фрагмента текста
при замене.

Класс символов - это метасимвол который совпадёт
с любым из перечисленных в [] символом или
диапазона символов.
Диапазоны указываются например так: [a-z]
Метасимволы не учитываются в классах символов.
Если первый символ класс - ^, то это делается
негативный класс. Если хочется добавить
в класс символ ^, он либо должен быть не первым,
либо перед ним должен быть \.

Квантификаторы:
За любым символом, группой или классом символов может
идти один из квантификаторов:

?      - жадное совпадение 0 или один раз.
??     - нежадное совпадение 0 или один раз.
*      - жадное совпадение 0 или более раз.
*?     - нежадное совпадение 0 или более раз.
+      - жадное совпадение 1 или более раз.
+?     - нежадное совпадение 1 или более раз.
{n}    - совпадение точно n раз.
{n,}   - жадное совпадение n или более раз.
{n,}?  - нежадное совпадение n или более раз.
{n,m}  - жадное совпадение не меньше чем n, но не больше чем m раз.
{n,m}? - нежадное совпадение не меньше чем n, но не больше чем m раз.

Что такое "жадность" и "нежадность".

Жадный квантификатор захватывает как можно больше.
И только если дальнейшего совпадения не получилось,
"отдаёт" захваченное ( происходит "откат", не самая "дешевая" операция ).
Если выражение /A.*Z/ сопоставить строке:
AZXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
то .*  сначала захватит всю строку, а потом
будет по одному символу "откатываться" пока не найдёт Z.
А если выражение будет /A.*?Z/ то Z найдётся сразу же.
Нежадный квантификатор еще называют минимизирующим,
он захватывает минимально возможное кол-во символов,
и только если дальнейшее совпадение не получилось,
захватывает еще.

Спецсимволы:
Если перед не буквой и не цифрой стоит ставить \,
что бы они именно так воспринимались, то для
букв и цифр это не верно. Ибо таким образом
обозначаются спецсимволы:

\t - tab (0x09)
\n - new line (0x0a)
\r - return(0x0d)
\f - form feed (0x0c)
\a - bell (0x07)
\e - escape (0x1b)
\xNN - hex char, где N - [0-9A-Fa-f].
\Q - начало квотирования метасимволов
\E - конец квотирования метасимволов
\w - буква, цифра или '_'.
\W - не \w
\s - пробельный символ.
\S - не \s
\d - цифра
\D - не цифра
\i - буква
\I - не буква
\l - символ в нижнем регистре
\L - не символ в нижнем регистре
\u - символ в верхнем регистре
\U - не символ в верхнем регистре
\b - граница слова
\B - не граница слова
\A - начало текста, независимо от опции m
\Z - конец текста, независимо от опции m
\O - точка "невозврата". Если при матчинге пройден этот символ,
     то отката назад не будет, сразу выдаст no match.
     Можно использовать в сложном выражении после обязательного фрагмента с
     квантификатором.
\NN - ссылка на ранее совпавшую скобку. NN целое число.

\b - означает, что слева или справа от текущей позиции находится
символ из "слова", а справа или слева, соответственно, из "не слова".

Кроме группировки круглые скобки служат так же для следующих операций:
(?:pattern) - группировка только. эта скобка не получает "номера".
(?=pattern) - просмотр вперёд. Совпадение продолжится с того же места,
              но только если pattern в этой скобке совпал.
(?!pattern) - отрицание просмотра вперёд. Совпадение продолжится с того
              же места, если pattern НЕ совпадёт.
(?<=pattern)- просмотр назад. к сожалению pattern должен быть фиксированной
              длинны, то есть не должен содержать квантификаторов.
(?<!pattern)- отрицание просмотра назад. Те же ограничения что и для
              просмотра назад.

Ссылки:
Каждая скобка (кроме вышеперечисленных) имеет номер,
по порядку появления открывающей скобки.
\N - где N это её номер, совпадёт с фрагментом текста,
совпавшим с содержимым скобки.
Например:/(['"])hello\1/ совпадёт с "hello" или 'hello'.

Опции:
i - игнорировать регистр
s - рассматривать текст как одну строку, '.' совпадает с абсолютно
    любым символом.
m - рассматривать текст как много строк. ^ и $ совпадают
    с началом и концом любой "внутренней" строки.
x - просто пробельные символы, без обратого слэша впереди, игнорируются.
    Полезно в сложных выражениях для структуризации.
o - оптимизировать выражение для поиска. Если это возможно, будет сформирован класс
    возможных первых символов. Поиск может очень серьёзно ускориться.
